// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"primijenjena-informatika-dev/ent/codespace"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Codespace is the model entity for the Codespace schema.
type Codespace struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// MachineType holds the value of the "machine_type" field.
	MachineType string `json:"machine_type,omitempty"`
	// ClientIP holds the value of the "client_ip" field.
	ClientIP string `json:"client_ip,omitempty"`
	// GithubUserID holds the value of the "github_user_id" field.
	GithubUserID string `json:"github_user_id,omitempty"`
	// GithubCodespaceID holds the value of the "github_codespace_id" field.
	GithubCodespaceID string `json:"github_codespace_id,omitempty"`
	// GithubCodespaceURL holds the value of the "github_codespace_url" field.
	GithubCodespaceURL string `json:"github_codespace_url,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Codespace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case codespace.FieldMachineType, codespace.FieldClientIP, codespace.FieldGithubUserID, codespace.FieldGithubCodespaceID, codespace.FieldGithubCodespaceURL:
			values[i] = new(sql.NullString)
		case codespace.FieldCreatedAt, codespace.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case codespace.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Codespace fields.
func (c *Codespace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codespace.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case codespace.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case codespace.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case codespace.FieldMachineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machine_type", values[i])
			} else if value.Valid {
				c.MachineType = value.String
			}
		case codespace.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_ip", values[i])
			} else if value.Valid {
				c.ClientIP = value.String
			}
		case codespace.FieldGithubUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_user_id", values[i])
			} else if value.Valid {
				c.GithubUserID = value.String
			}
		case codespace.FieldGithubCodespaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_codespace_id", values[i])
			} else if value.Valid {
				c.GithubCodespaceID = value.String
			}
		case codespace.FieldGithubCodespaceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_codespace_url", values[i])
			} else if value.Valid {
				c.GithubCodespaceURL = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Codespace.
// This includes values selected through modifiers, order, etc.
func (c *Codespace) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Codespace.
// Note that you need to call Codespace.Unwrap() before calling this method if this Codespace
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Codespace) Update() *CodespaceUpdateOne {
	return NewCodespaceClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Codespace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Codespace) Unwrap() *Codespace {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Codespace is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Codespace) String() string {
	var builder strings.Builder
	builder.WriteString("Codespace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("machine_type=")
	builder.WriteString(c.MachineType)
	builder.WriteString(", ")
	builder.WriteString("client_ip=")
	builder.WriteString(c.ClientIP)
	builder.WriteString(", ")
	builder.WriteString("github_user_id=")
	builder.WriteString(c.GithubUserID)
	builder.WriteString(", ")
	builder.WriteString("github_codespace_id=")
	builder.WriteString(c.GithubCodespaceID)
	builder.WriteString(", ")
	builder.WriteString("github_codespace_url=")
	builder.WriteString(c.GithubCodespaceURL)
	builder.WriteByte(')')
	return builder.String()
}

// Codespaces is a parsable slice of Codespace.
type Codespaces []*Codespace
