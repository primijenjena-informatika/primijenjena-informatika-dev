// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"primijenjena-informatika-dev/ent/codespace"
	"primijenjena-informatika-dev/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodespaceUpdate is the builder for updating Codespace entities.
type CodespaceUpdate struct {
	config
	hooks    []Hook
	mutation *CodespaceMutation
}

// Where appends a list predicates to the CodespaceUpdate builder.
func (cu *CodespaceUpdate) Where(ps ...predicate.Codespace) *CodespaceUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CodespaceUpdate) SetCreatedAt(t time.Time) *CodespaceUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableCreatedAt(t *time.Time) *CodespaceUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CodespaceUpdate) SetUpdatedAt(t time.Time) *CodespaceUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetMachineType sets the "machine_type" field.
func (cu *CodespaceUpdate) SetMachineType(s string) *CodespaceUpdate {
	cu.mutation.SetMachineType(s)
	return cu
}

// SetNillableMachineType sets the "machine_type" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableMachineType(s *string) *CodespaceUpdate {
	if s != nil {
		cu.SetMachineType(*s)
	}
	return cu
}

// SetClientIP sets the "client_ip" field.
func (cu *CodespaceUpdate) SetClientIP(s string) *CodespaceUpdate {
	cu.mutation.SetClientIP(s)
	return cu
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableClientIP(s *string) *CodespaceUpdate {
	if s != nil {
		cu.SetClientIP(*s)
	}
	return cu
}

// SetGithubUserID sets the "github_user_id" field.
func (cu *CodespaceUpdate) SetGithubUserID(s string) *CodespaceUpdate {
	cu.mutation.SetGithubUserID(s)
	return cu
}

// SetNillableGithubUserID sets the "github_user_id" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableGithubUserID(s *string) *CodespaceUpdate {
	if s != nil {
		cu.SetGithubUserID(*s)
	}
	return cu
}

// SetGithubCodespaceID sets the "github_codespace_id" field.
func (cu *CodespaceUpdate) SetGithubCodespaceID(s string) *CodespaceUpdate {
	cu.mutation.SetGithubCodespaceID(s)
	return cu
}

// SetNillableGithubCodespaceID sets the "github_codespace_id" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableGithubCodespaceID(s *string) *CodespaceUpdate {
	if s != nil {
		cu.SetGithubCodespaceID(*s)
	}
	return cu
}

// SetGithubCodespaceURL sets the "github_codespace_url" field.
func (cu *CodespaceUpdate) SetGithubCodespaceURL(s string) *CodespaceUpdate {
	cu.mutation.SetGithubCodespaceURL(s)
	return cu
}

// SetNillableGithubCodespaceURL sets the "github_codespace_url" field if the given value is not nil.
func (cu *CodespaceUpdate) SetNillableGithubCodespaceURL(s *string) *CodespaceUpdate {
	if s != nil {
		cu.SetGithubCodespaceURL(*s)
	}
	return cu
}

// Mutation returns the CodespaceMutation object of the builder.
func (cu *CodespaceUpdate) Mutation() *CodespaceMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CodespaceUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CodespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CodespaceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CodespaceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CodespaceUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := codespace.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CodespaceUpdate) check() error {
	if v, ok := cu.mutation.MachineType(); ok {
		if err := codespace.MachineTypeValidator(v); err != nil {
			return &ValidationError{Name: "machine_type", err: fmt.Errorf(`ent: validator failed for field "Codespace.machine_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ClientIP(); ok {
		if err := codespace.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "Codespace.client_ip": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GithubUserID(); ok {
		if err := codespace.GithubUserIDValidator(v); err != nil {
			return &ValidationError{Name: "github_user_id", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_user_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GithubCodespaceID(); ok {
		if err := codespace.GithubCodespaceIDValidator(v); err != nil {
			return &ValidationError{Name: "github_codespace_id", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_codespace_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GithubCodespaceURL(); ok {
		if err := codespace.GithubCodespaceURLValidator(v); err != nil {
			return &ValidationError{Name: "github_codespace_url", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_codespace_url": %w`, err)}
		}
	}
	return nil
}

func (cu *CodespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(codespace.Table, codespace.Columns, sqlgraph.NewFieldSpec(codespace.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(codespace.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(codespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.MachineType(); ok {
		_spec.SetField(codespace.FieldMachineType, field.TypeString, value)
	}
	if value, ok := cu.mutation.ClientIP(); ok {
		_spec.SetField(codespace.FieldClientIP, field.TypeString, value)
	}
	if value, ok := cu.mutation.GithubUserID(); ok {
		_spec.SetField(codespace.FieldGithubUserID, field.TypeString, value)
	}
	if value, ok := cu.mutation.GithubCodespaceID(); ok {
		_spec.SetField(codespace.FieldGithubCodespaceID, field.TypeString, value)
	}
	if value, ok := cu.mutation.GithubCodespaceURL(); ok {
		_spec.SetField(codespace.FieldGithubCodespaceURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CodespaceUpdateOne is the builder for updating a single Codespace entity.
type CodespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodespaceMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CodespaceUpdateOne) SetCreatedAt(t time.Time) *CodespaceUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableCreatedAt(t *time.Time) *CodespaceUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CodespaceUpdateOne) SetUpdatedAt(t time.Time) *CodespaceUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetMachineType sets the "machine_type" field.
func (cuo *CodespaceUpdateOne) SetMachineType(s string) *CodespaceUpdateOne {
	cuo.mutation.SetMachineType(s)
	return cuo
}

// SetNillableMachineType sets the "machine_type" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableMachineType(s *string) *CodespaceUpdateOne {
	if s != nil {
		cuo.SetMachineType(*s)
	}
	return cuo
}

// SetClientIP sets the "client_ip" field.
func (cuo *CodespaceUpdateOne) SetClientIP(s string) *CodespaceUpdateOne {
	cuo.mutation.SetClientIP(s)
	return cuo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableClientIP(s *string) *CodespaceUpdateOne {
	if s != nil {
		cuo.SetClientIP(*s)
	}
	return cuo
}

// SetGithubUserID sets the "github_user_id" field.
func (cuo *CodespaceUpdateOne) SetGithubUserID(s string) *CodespaceUpdateOne {
	cuo.mutation.SetGithubUserID(s)
	return cuo
}

// SetNillableGithubUserID sets the "github_user_id" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableGithubUserID(s *string) *CodespaceUpdateOne {
	if s != nil {
		cuo.SetGithubUserID(*s)
	}
	return cuo
}

// SetGithubCodespaceID sets the "github_codespace_id" field.
func (cuo *CodespaceUpdateOne) SetGithubCodespaceID(s string) *CodespaceUpdateOne {
	cuo.mutation.SetGithubCodespaceID(s)
	return cuo
}

// SetNillableGithubCodespaceID sets the "github_codespace_id" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableGithubCodespaceID(s *string) *CodespaceUpdateOne {
	if s != nil {
		cuo.SetGithubCodespaceID(*s)
	}
	return cuo
}

// SetGithubCodespaceURL sets the "github_codespace_url" field.
func (cuo *CodespaceUpdateOne) SetGithubCodespaceURL(s string) *CodespaceUpdateOne {
	cuo.mutation.SetGithubCodespaceURL(s)
	return cuo
}

// SetNillableGithubCodespaceURL sets the "github_codespace_url" field if the given value is not nil.
func (cuo *CodespaceUpdateOne) SetNillableGithubCodespaceURL(s *string) *CodespaceUpdateOne {
	if s != nil {
		cuo.SetGithubCodespaceURL(*s)
	}
	return cuo
}

// Mutation returns the CodespaceMutation object of the builder.
func (cuo *CodespaceUpdateOne) Mutation() *CodespaceMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CodespaceUpdate builder.
func (cuo *CodespaceUpdateOne) Where(ps ...predicate.Codespace) *CodespaceUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CodespaceUpdateOne) Select(field string, fields ...string) *CodespaceUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Codespace entity.
func (cuo *CodespaceUpdateOne) Save(ctx context.Context) (*Codespace, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CodespaceUpdateOne) SaveX(ctx context.Context) *Codespace {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CodespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CodespaceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CodespaceUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := codespace.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CodespaceUpdateOne) check() error {
	if v, ok := cuo.mutation.MachineType(); ok {
		if err := codespace.MachineTypeValidator(v); err != nil {
			return &ValidationError{Name: "machine_type", err: fmt.Errorf(`ent: validator failed for field "Codespace.machine_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ClientIP(); ok {
		if err := codespace.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "Codespace.client_ip": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GithubUserID(); ok {
		if err := codespace.GithubUserIDValidator(v); err != nil {
			return &ValidationError{Name: "github_user_id", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_user_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GithubCodespaceID(); ok {
		if err := codespace.GithubCodespaceIDValidator(v); err != nil {
			return &ValidationError{Name: "github_codespace_id", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_codespace_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GithubCodespaceURL(); ok {
		if err := codespace.GithubCodespaceURLValidator(v); err != nil {
			return &ValidationError{Name: "github_codespace_url", err: fmt.Errorf(`ent: validator failed for field "Codespace.github_codespace_url": %w`, err)}
		}
	}
	return nil
}

func (cuo *CodespaceUpdateOne) sqlSave(ctx context.Context) (_node *Codespace, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(codespace.Table, codespace.Columns, sqlgraph.NewFieldSpec(codespace.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Codespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codespace.FieldID)
		for _, f := range fields {
			if !codespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != codespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(codespace.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(codespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.MachineType(); ok {
		_spec.SetField(codespace.FieldMachineType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ClientIP(); ok {
		_spec.SetField(codespace.FieldClientIP, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GithubUserID(); ok {
		_spec.SetField(codespace.FieldGithubUserID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GithubCodespaceID(); ok {
		_spec.SetField(codespace.FieldGithubCodespaceID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GithubCodespaceURL(); ok {
		_spec.SetField(codespace.FieldGithubCodespaceURL, field.TypeString, value)
	}
	_node = &Codespace{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
