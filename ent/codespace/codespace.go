// Code generated by ent, DO NOT EDIT.

package codespace

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the codespace type in the database.
	Label = "codespace"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "old"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMachineType holds the string denoting the machine_type field in the database.
	FieldMachineType = "machine_type"
	// FieldClientIP holds the string denoting the client_ip field in the database.
	FieldClientIP = "client_ip"
	// FieldGithubUserID holds the string denoting the github_user_id field in the database.
	FieldGithubUserID = "github_user_id"
	// FieldGithubCodespaceID holds the string denoting the github_codespace_id field in the database.
	FieldGithubCodespaceID = "github_codespace_id"
	// FieldGithubCodespaceURL holds the string denoting the github_codespace_url field in the database.
	FieldGithubCodespaceURL = "github_codespace_url"
	// Table holds the table name of the codespace in the database.
	Table = "codespaces"
)

// Columns holds all SQL columns for codespace fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMachineType,
	FieldClientIP,
	FieldGithubUserID,
	FieldGithubCodespaceID,
	FieldGithubCodespaceURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// MachineTypeValidator is a validator for the "machine_type" field. It is called by the builders before save.
	MachineTypeValidator func(string) error
	// ClientIPValidator is a validator for the "client_ip" field. It is called by the builders before save.
	ClientIPValidator func(string) error
	// GithubUserIDValidator is a validator for the "github_user_id" field. It is called by the builders before save.
	GithubUserIDValidator func(string) error
	// GithubCodespaceIDValidator is a validator for the "github_codespace_id" field. It is called by the builders before save.
	GithubCodespaceIDValidator func(string) error
	// GithubCodespaceURLValidator is a validator for the "github_codespace_url" field. It is called by the builders before save.
	GithubCodespaceURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Codespace queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMachineType orders the results by the machine_type field.
func ByMachineType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMachineType, opts...).ToFunc()
}

// ByClientIP orders the results by the client_ip field.
func ByClientIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientIP, opts...).ToFunc()
}

// ByGithubUserID orders the results by the github_user_id field.
func ByGithubUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubUserID, opts...).ToFunc()
}

// ByGithubCodespaceID orders the results by the github_codespace_id field.
func ByGithubCodespaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubCodespaceID, opts...).ToFunc()
}

// ByGithubCodespaceURL orders the results by the github_codespace_url field.
func ByGithubCodespaceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubCodespaceURL, opts...).ToFunc()
}
