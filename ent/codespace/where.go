// Code generated by ent, DO NOT EDIT.

package codespace

import (
	"primijenjena-informatika-dev/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldUpdatedAt, v))
}

// MachineType applies equality check predicate on the "machine_type" field. It's identical to MachineTypeEQ.
func MachineType(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldMachineType, v))
}

// ClientIP applies equality check predicate on the "client_ip" field. It's identical to ClientIPEQ.
func ClientIP(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldClientIP, v))
}

// GithubUserID applies equality check predicate on the "github_user_id" field. It's identical to GithubUserIDEQ.
func GithubUserID(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubUserID, v))
}

// GithubCodespaceID applies equality check predicate on the "github_codespace_id" field. It's identical to GithubCodespaceIDEQ.
func GithubCodespaceID(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubCodespaceID, v))
}

// GithubCodespaceURL applies equality check predicate on the "github_codespace_url" field. It's identical to GithubCodespaceURLEQ.
func GithubCodespaceURL(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubCodespaceURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldUpdatedAt, v))
}

// MachineTypeEQ applies the EQ predicate on the "machine_type" field.
func MachineTypeEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldMachineType, v))
}

// MachineTypeNEQ applies the NEQ predicate on the "machine_type" field.
func MachineTypeNEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldMachineType, v))
}

// MachineTypeIn applies the In predicate on the "machine_type" field.
func MachineTypeIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldMachineType, vs...))
}

// MachineTypeNotIn applies the NotIn predicate on the "machine_type" field.
func MachineTypeNotIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldMachineType, vs...))
}

// MachineTypeGT applies the GT predicate on the "machine_type" field.
func MachineTypeGT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldMachineType, v))
}

// MachineTypeGTE applies the GTE predicate on the "machine_type" field.
func MachineTypeGTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldMachineType, v))
}

// MachineTypeLT applies the LT predicate on the "machine_type" field.
func MachineTypeLT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldMachineType, v))
}

// MachineTypeLTE applies the LTE predicate on the "machine_type" field.
func MachineTypeLTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldMachineType, v))
}

// MachineTypeContains applies the Contains predicate on the "machine_type" field.
func MachineTypeContains(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContains(FieldMachineType, v))
}

// MachineTypeHasPrefix applies the HasPrefix predicate on the "machine_type" field.
func MachineTypeHasPrefix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasPrefix(FieldMachineType, v))
}

// MachineTypeHasSuffix applies the HasSuffix predicate on the "machine_type" field.
func MachineTypeHasSuffix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasSuffix(FieldMachineType, v))
}

// MachineTypeEqualFold applies the EqualFold predicate on the "machine_type" field.
func MachineTypeEqualFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEqualFold(FieldMachineType, v))
}

// MachineTypeContainsFold applies the ContainsFold predicate on the "machine_type" field.
func MachineTypeContainsFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContainsFold(FieldMachineType, v))
}

// ClientIPEQ applies the EQ predicate on the "client_ip" field.
func ClientIPEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldClientIP, v))
}

// ClientIPNEQ applies the NEQ predicate on the "client_ip" field.
func ClientIPNEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldClientIP, v))
}

// ClientIPIn applies the In predicate on the "client_ip" field.
func ClientIPIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldClientIP, vs...))
}

// ClientIPNotIn applies the NotIn predicate on the "client_ip" field.
func ClientIPNotIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldClientIP, vs...))
}

// ClientIPGT applies the GT predicate on the "client_ip" field.
func ClientIPGT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldClientIP, v))
}

// ClientIPGTE applies the GTE predicate on the "client_ip" field.
func ClientIPGTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldClientIP, v))
}

// ClientIPLT applies the LT predicate on the "client_ip" field.
func ClientIPLT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldClientIP, v))
}

// ClientIPLTE applies the LTE predicate on the "client_ip" field.
func ClientIPLTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldClientIP, v))
}

// ClientIPContains applies the Contains predicate on the "client_ip" field.
func ClientIPContains(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContains(FieldClientIP, v))
}

// ClientIPHasPrefix applies the HasPrefix predicate on the "client_ip" field.
func ClientIPHasPrefix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasPrefix(FieldClientIP, v))
}

// ClientIPHasSuffix applies the HasSuffix predicate on the "client_ip" field.
func ClientIPHasSuffix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasSuffix(FieldClientIP, v))
}

// ClientIPEqualFold applies the EqualFold predicate on the "client_ip" field.
func ClientIPEqualFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEqualFold(FieldClientIP, v))
}

// ClientIPContainsFold applies the ContainsFold predicate on the "client_ip" field.
func ClientIPContainsFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContainsFold(FieldClientIP, v))
}

// GithubUserIDEQ applies the EQ predicate on the "github_user_id" field.
func GithubUserIDEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubUserID, v))
}

// GithubUserIDNEQ applies the NEQ predicate on the "github_user_id" field.
func GithubUserIDNEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldGithubUserID, v))
}

// GithubUserIDIn applies the In predicate on the "github_user_id" field.
func GithubUserIDIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldGithubUserID, vs...))
}

// GithubUserIDNotIn applies the NotIn predicate on the "github_user_id" field.
func GithubUserIDNotIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldGithubUserID, vs...))
}

// GithubUserIDGT applies the GT predicate on the "github_user_id" field.
func GithubUserIDGT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldGithubUserID, v))
}

// GithubUserIDGTE applies the GTE predicate on the "github_user_id" field.
func GithubUserIDGTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldGithubUserID, v))
}

// GithubUserIDLT applies the LT predicate on the "github_user_id" field.
func GithubUserIDLT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldGithubUserID, v))
}

// GithubUserIDLTE applies the LTE predicate on the "github_user_id" field.
func GithubUserIDLTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldGithubUserID, v))
}

// GithubUserIDContains applies the Contains predicate on the "github_user_id" field.
func GithubUserIDContains(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContains(FieldGithubUserID, v))
}

// GithubUserIDHasPrefix applies the HasPrefix predicate on the "github_user_id" field.
func GithubUserIDHasPrefix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasPrefix(FieldGithubUserID, v))
}

// GithubUserIDHasSuffix applies the HasSuffix predicate on the "github_user_id" field.
func GithubUserIDHasSuffix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasSuffix(FieldGithubUserID, v))
}

// GithubUserIDEqualFold applies the EqualFold predicate on the "github_user_id" field.
func GithubUserIDEqualFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEqualFold(FieldGithubUserID, v))
}

// GithubUserIDContainsFold applies the ContainsFold predicate on the "github_user_id" field.
func GithubUserIDContainsFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContainsFold(FieldGithubUserID, v))
}

// GithubCodespaceIDEQ applies the EQ predicate on the "github_codespace_id" field.
func GithubCodespaceIDEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDNEQ applies the NEQ predicate on the "github_codespace_id" field.
func GithubCodespaceIDNEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDIn applies the In predicate on the "github_codespace_id" field.
func GithubCodespaceIDIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldGithubCodespaceID, vs...))
}

// GithubCodespaceIDNotIn applies the NotIn predicate on the "github_codespace_id" field.
func GithubCodespaceIDNotIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldGithubCodespaceID, vs...))
}

// GithubCodespaceIDGT applies the GT predicate on the "github_codespace_id" field.
func GithubCodespaceIDGT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDGTE applies the GTE predicate on the "github_codespace_id" field.
func GithubCodespaceIDGTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDLT applies the LT predicate on the "github_codespace_id" field.
func GithubCodespaceIDLT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDLTE applies the LTE predicate on the "github_codespace_id" field.
func GithubCodespaceIDLTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDContains applies the Contains predicate on the "github_codespace_id" field.
func GithubCodespaceIDContains(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContains(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDHasPrefix applies the HasPrefix predicate on the "github_codespace_id" field.
func GithubCodespaceIDHasPrefix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasPrefix(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDHasSuffix applies the HasSuffix predicate on the "github_codespace_id" field.
func GithubCodespaceIDHasSuffix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasSuffix(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDEqualFold applies the EqualFold predicate on the "github_codespace_id" field.
func GithubCodespaceIDEqualFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEqualFold(FieldGithubCodespaceID, v))
}

// GithubCodespaceIDContainsFold applies the ContainsFold predicate on the "github_codespace_id" field.
func GithubCodespaceIDContainsFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContainsFold(FieldGithubCodespaceID, v))
}

// GithubCodespaceURLEQ applies the EQ predicate on the "github_codespace_url" field.
func GithubCodespaceURLEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEQ(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLNEQ applies the NEQ predicate on the "github_codespace_url" field.
func GithubCodespaceURLNEQ(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNEQ(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLIn applies the In predicate on the "github_codespace_url" field.
func GithubCodespaceURLIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldIn(FieldGithubCodespaceURL, vs...))
}

// GithubCodespaceURLNotIn applies the NotIn predicate on the "github_codespace_url" field.
func GithubCodespaceURLNotIn(vs ...string) predicate.Codespace {
	return predicate.Codespace(sql.FieldNotIn(FieldGithubCodespaceURL, vs...))
}

// GithubCodespaceURLGT applies the GT predicate on the "github_codespace_url" field.
func GithubCodespaceURLGT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGT(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLGTE applies the GTE predicate on the "github_codespace_url" field.
func GithubCodespaceURLGTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldGTE(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLLT applies the LT predicate on the "github_codespace_url" field.
func GithubCodespaceURLLT(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLT(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLLTE applies the LTE predicate on the "github_codespace_url" field.
func GithubCodespaceURLLTE(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldLTE(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLContains applies the Contains predicate on the "github_codespace_url" field.
func GithubCodespaceURLContains(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContains(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLHasPrefix applies the HasPrefix predicate on the "github_codespace_url" field.
func GithubCodespaceURLHasPrefix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasPrefix(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLHasSuffix applies the HasSuffix predicate on the "github_codespace_url" field.
func GithubCodespaceURLHasSuffix(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldHasSuffix(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLEqualFold applies the EqualFold predicate on the "github_codespace_url" field.
func GithubCodespaceURLEqualFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldEqualFold(FieldGithubCodespaceURL, v))
}

// GithubCodespaceURLContainsFold applies the ContainsFold predicate on the "github_codespace_url" field.
func GithubCodespaceURLContainsFold(v string) predicate.Codespace {
	return predicate.Codespace(sql.FieldContainsFold(FieldGithubCodespaceURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Codespace) predicate.Codespace {
	return predicate.Codespace(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Codespace) predicate.Codespace {
	return predicate.Codespace(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Codespace) predicate.Codespace {
	return predicate.Codespace(sql.NotPredicates(p))
}
