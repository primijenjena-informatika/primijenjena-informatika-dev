// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"primijenjena-informatika-dev/ent/codespace"
	"primijenjena-informatika-dev/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCodespace = "Codespace"
)

// CodespaceMutation represents an operation that mutates the Codespace nodes in the graph.
type CodespaceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	machine_type         *string
	client_ip            *string
	github_user_id       *string
	github_codespace_id  *string
	github_codespace_url *string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Codespace, error)
	predicates           []predicate.Codespace
}

var _ ent.Mutation = (*CodespaceMutation)(nil)

// codespaceOption allows management of the mutation configuration using functional options.
type codespaceOption func(*CodespaceMutation)

// newCodespaceMutation creates new mutation for the Codespace entity.
func newCodespaceMutation(c config, op Op, opts ...codespaceOption) *CodespaceMutation {
	m := &CodespaceMutation{
		config:        c,
		op:            op,
		typ:           TypeCodespace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodespaceID sets the ID field of the mutation.
func withCodespaceID(id uuid.UUID) codespaceOption {
	return func(m *CodespaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Codespace
		)
		m.oldValue = func(ctx context.Context) (*Codespace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Codespace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCodespace sets the old Codespace of the mutation.
func withCodespace(node *Codespace) codespaceOption {
	return func(m *CodespaceMutation) {
		m.oldValue = func(context.Context) (*Codespace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodespaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodespaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Codespace entities.
func (m *CodespaceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodespaceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodespaceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Codespace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CodespaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CodespaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CodespaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CodespaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CodespaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CodespaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMachineType sets the "machine_type" field.
func (m *CodespaceMutation) SetMachineType(s string) {
	m.machine_type = &s
}

// MachineType returns the value of the "machine_type" field in the mutation.
func (m *CodespaceMutation) MachineType() (r string, exists bool) {
	v := m.machine_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMachineType returns the old "machine_type" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldMachineType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMachineType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMachineType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMachineType: %w", err)
	}
	return oldValue.MachineType, nil
}

// ResetMachineType resets all changes to the "machine_type" field.
func (m *CodespaceMutation) ResetMachineType() {
	m.machine_type = nil
}

// SetClientIP sets the "client_ip" field.
func (m *CodespaceMutation) SetClientIP(s string) {
	m.client_ip = &s
}

// ClientIP returns the value of the "client_ip" field in the mutation.
func (m *CodespaceMutation) ClientIP() (r string, exists bool) {
	v := m.client_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldClientIP returns the old "client_ip" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldClientIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientIP: %w", err)
	}
	return oldValue.ClientIP, nil
}

// ResetClientIP resets all changes to the "client_ip" field.
func (m *CodespaceMutation) ResetClientIP() {
	m.client_ip = nil
}

// SetGithubUserID sets the "github_user_id" field.
func (m *CodespaceMutation) SetGithubUserID(s string) {
	m.github_user_id = &s
}

// GithubUserID returns the value of the "github_user_id" field in the mutation.
func (m *CodespaceMutation) GithubUserID() (r string, exists bool) {
	v := m.github_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubUserID returns the old "github_user_id" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldGithubUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubUserID: %w", err)
	}
	return oldValue.GithubUserID, nil
}

// ResetGithubUserID resets all changes to the "github_user_id" field.
func (m *CodespaceMutation) ResetGithubUserID() {
	m.github_user_id = nil
}

// SetGithubCodespaceID sets the "github_codespace_id" field.
func (m *CodespaceMutation) SetGithubCodespaceID(s string) {
	m.github_codespace_id = &s
}

// GithubCodespaceID returns the value of the "github_codespace_id" field in the mutation.
func (m *CodespaceMutation) GithubCodespaceID() (r string, exists bool) {
	v := m.github_codespace_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubCodespaceID returns the old "github_codespace_id" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldGithubCodespaceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubCodespaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubCodespaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubCodespaceID: %w", err)
	}
	return oldValue.GithubCodespaceID, nil
}

// ResetGithubCodespaceID resets all changes to the "github_codespace_id" field.
func (m *CodespaceMutation) ResetGithubCodespaceID() {
	m.github_codespace_id = nil
}

// SetGithubCodespaceURL sets the "github_codespace_url" field.
func (m *CodespaceMutation) SetGithubCodespaceURL(s string) {
	m.github_codespace_url = &s
}

// GithubCodespaceURL returns the value of the "github_codespace_url" field in the mutation.
func (m *CodespaceMutation) GithubCodespaceURL() (r string, exists bool) {
	v := m.github_codespace_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubCodespaceURL returns the old "github_codespace_url" field's value of the Codespace entity.
// If the Codespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodespaceMutation) OldGithubCodespaceURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubCodespaceURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubCodespaceURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubCodespaceURL: %w", err)
	}
	return oldValue.GithubCodespaceURL, nil
}

// ResetGithubCodespaceURL resets all changes to the "github_codespace_url" field.
func (m *CodespaceMutation) ResetGithubCodespaceURL() {
	m.github_codespace_url = nil
}

// Where appends a list predicates to the CodespaceMutation builder.
func (m *CodespaceMutation) Where(ps ...predicate.Codespace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodespaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodespaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Codespace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodespaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodespaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Codespace).
func (m *CodespaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodespaceMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, codespace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, codespace.FieldUpdatedAt)
	}
	if m.machine_type != nil {
		fields = append(fields, codespace.FieldMachineType)
	}
	if m.client_ip != nil {
		fields = append(fields, codespace.FieldClientIP)
	}
	if m.github_user_id != nil {
		fields = append(fields, codespace.FieldGithubUserID)
	}
	if m.github_codespace_id != nil {
		fields = append(fields, codespace.FieldGithubCodespaceID)
	}
	if m.github_codespace_url != nil {
		fields = append(fields, codespace.FieldGithubCodespaceURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodespaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case codespace.FieldCreatedAt:
		return m.CreatedAt()
	case codespace.FieldUpdatedAt:
		return m.UpdatedAt()
	case codespace.FieldMachineType:
		return m.MachineType()
	case codespace.FieldClientIP:
		return m.ClientIP()
	case codespace.FieldGithubUserID:
		return m.GithubUserID()
	case codespace.FieldGithubCodespaceID:
		return m.GithubCodespaceID()
	case codespace.FieldGithubCodespaceURL:
		return m.GithubCodespaceURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodespaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case codespace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case codespace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case codespace.FieldMachineType:
		return m.OldMachineType(ctx)
	case codespace.FieldClientIP:
		return m.OldClientIP(ctx)
	case codespace.FieldGithubUserID:
		return m.OldGithubUserID(ctx)
	case codespace.FieldGithubCodespaceID:
		return m.OldGithubCodespaceID(ctx)
	case codespace.FieldGithubCodespaceURL:
		return m.OldGithubCodespaceURL(ctx)
	}
	return nil, fmt.Errorf("unknown Codespace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodespaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case codespace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case codespace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case codespace.FieldMachineType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMachineType(v)
		return nil
	case codespace.FieldClientIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientIP(v)
		return nil
	case codespace.FieldGithubUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubUserID(v)
		return nil
	case codespace.FieldGithubCodespaceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubCodespaceID(v)
		return nil
	case codespace.FieldGithubCodespaceURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubCodespaceURL(v)
		return nil
	}
	return fmt.Errorf("unknown Codespace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodespaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodespaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodespaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Codespace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodespaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodespaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodespaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Codespace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodespaceMutation) ResetField(name string) error {
	switch name {
	case codespace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case codespace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case codespace.FieldMachineType:
		m.ResetMachineType()
		return nil
	case codespace.FieldClientIP:
		m.ResetClientIP()
		return nil
	case codespace.FieldGithubUserID:
		m.ResetGithubUserID()
		return nil
	case codespace.FieldGithubCodespaceID:
		m.ResetGithubCodespaceID()
		return nil
	case codespace.FieldGithubCodespaceURL:
		m.ResetGithubCodespaceURL()
		return nil
	}
	return fmt.Errorf("unknown Codespace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodespaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodespaceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodespaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodespaceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodespaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodespaceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodespaceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Codespace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodespaceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Codespace edge %s", name)
}
